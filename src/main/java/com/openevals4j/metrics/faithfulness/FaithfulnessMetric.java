package com.openevals4j.metrics.faithfulness;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.openevals4j.metrics.LLMBasedMetric;
import com.openevals4j.metrics.MetricName;
import com.openevals4j.metrics.models.EvaluationContext;
import com.openevals4j.metrics.models.EvaluationResult;
import dev.langchain4j.model.chat.ChatLanguageModel;
import dev.langchain4j.model.chat.response.ChatResponse;
import java.util.List;
import lombok.Builder;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class FaithfulnessMetric extends LLMBasedMetric<EvaluationContext, EvaluationResult> {

  public static final String FAITHFULNESS_EVALUATION_PROMPT =
      """
          ## Overview
          Evaluate the faithfulness of an assistant's response based on how accurately it represents information from the retrieved context when answering a user's question.

          ## Input Format
          The evaluation will include:
          1. **User Question**: The original query submitted by the user
          2. **Retrieved Context**: The source document(s) or information provided to the assistant
          3. **Assistant's Answer**: The response generated by the assistant

          ## Evaluation Scale (1-5)
          | Score | Description | Criteria |
          |-------|-------------|----------|
          | 1 | **Severe Unfaithfulness** | • Makes claims directly contradicting the context<br>• Fabricates substantial information not in context<br>• Invents non-existent sources or citations<br>• Completely misrepresents the context |
          | 2 | **Significant Unfaithfulness** | • Contains multiple factual errors<br>• Includes significant unsupported claims<br>• Misrepresents key aspects of the context<br>• Draws conclusions explicitly contradicted by context |
          | 3 | **Partially Faithful** | • Contains minor factual errors<br>• Makes some claims with insufficient context support<br>• Generally follows context but with notable deviations<br>• Stretches reasonable inferences beyond what context supports |
          | 4 | **Mostly Faithful** | • Contains factually accurate information with minimal discrepancies<br>• Makes reasonable inferences from context<br>• May omit information but without changing meaning<br>• Any uncertainties are appropriately acknowledged |
          | 5 | **Completely Faithful** | • Contains only information explicitly stated in or directly inferable from context<br>• Makes no unsupported claims<br>• Accurately represents all nuances and qualifications<br>• Appropriately indicates uncertainty when context is ambiguous |

          ## Evaluation Process
          1. **Verify Facts**: Cross-check every factual claim in the answer against the retrieved context
          2. **Identify Hallucinations**: Note any information in the answer not supported by the context
          3. **Check Inferences**: Assess whether inferences drawn are reasonable given the context
          4. **Examine Omissions**: Determine if any omitted information changes the meaning of the answer
          5. **Review Uncertainty Language**: Check whether the assistant appropriately expresses uncertainty when information is incomplete

          ## Scoring Guidelines
          - An answer should only contain information that is explicitly stated in or reasonably inferable from the retrieved context
          - If the assistant acknowledges limitations (e.g., "Based on the provided context, I cannot determine..."), this should not negatively impact faithfulness
          - Format and restructuring of information should not affect faithfulness unless they change meaning
          - Direct quotes should be accurate; paraphrasing should preserve original meaning

          ## Output Format

          Provide your response in the following format:
          score: <number between 1 and 5>
          reasoning: <your detailed analysis>

          Context: %s

          Question: %s
          Answer: %s

          """;

  @Builder
  public FaithfulnessMetric(ChatLanguageModel evaluatorLLM, ObjectMapper objectMapper) {
    super(MetricName.FAITHFULNESS, evaluatorLLM, objectMapper);
  }

  @Override
  public EvaluationResult evaluate(EvaluationContext evaluationContext) {

    validateEvaluationContext(evaluationContext);

    try {

      String prompt =
          String.format(
              FAITHFULNESS_EVALUATION_PROMPT,
              evaluationContext.getRetrievedContexts(),
              evaluationContext.getUserInput(),
              evaluationContext.getActualResponse());

      ChatResponse output = getEvaluatorLLM().chat(buildChatRequest(prompt, getResponseFormat()));

      return getObjectMapper().readValue(output.aiMessage().text(), EvaluationResult.class);

    } catch (JsonProcessingException exception) {
      log.error(
          "Error occurred while evaluating faithfulness metric for evaluation context {}",
          evaluationContext,
          exception);
    }

    return getDefaultEvaluationResult();
  }

  @Override
  protected List<String> getRequiredFieldsForValidation() {
    return List.of("userInput", "actualResponse", "retrievedContexts");
  }
}
